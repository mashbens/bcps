// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/mashbens/cps/business/admin/entity"
	mock "github.com/stretchr/testify/mock"
)

// AdminService is an autogenerated mock type for the AdminService type
type AdminService struct {
	mock.Mock
}

// AdminLogin provides a mock function with given fields: _a0
func (_m *AdminService) AdminLogin(_a0 entity.Admin) (*entity.Admin, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Admin
	if rf, ok := ret.Get(0).(func(entity.Admin) *entity.Admin); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Admin) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAdmin provides a mock function with given fields: sAdminID, adminID
func (_m *AdminService) DeleteAdmin(sAdminID string, adminID string) error {
	ret := _m.Called(sAdminID, adminID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(sAdminID, adminID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAdminByEmail provides a mock function with given fields: email
func (_m *AdminService) FindAdminByEmail(email string) (*entity.Admin, error) {
	ret := _m.Called(email)

	var r0 *entity.Admin
	if rf, ok := ret.Get(0).(func(string) *entity.Admin); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAdminByID provides a mock function with given fields: adminID
func (_m *AdminService) FindAdminByID(adminID string) (*entity.Admin, error) {
	ret := _m.Called(adminID)

	var r0 *entity.Admin
	if rf, ok := ret.Get(0).(func(string) *entity.Admin); ok {
		r0 = rf(adminID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllAdmins provides a mock function with given fields: sAdminID, search
func (_m *AdminService) FindAllAdmins(sAdminID string, search string) []entity.Admin {
	ret := _m.Called(sAdminID, search)

	var r0 []entity.Admin
	if rf, ok := ret.Get(0).(func(string, string) []entity.Admin); ok {
		r0 = rf(sAdminID, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Admin)
		}
	}

	return r0
}

// InsertAdmin provides a mock function with given fields: _a0
func (_m *AdminService) InsertAdmin(_a0 entity.Admin) (*entity.Admin, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Admin
	if rf, ok := ret.Get(0).(func(entity.Admin) *entity.Admin); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Admin) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdmin provides a mock function with given fields: _a0
func (_m *AdminService) UpdateAdmin(_a0 entity.Admin) (*entity.Admin, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Admin
	if rf, ok := ret.Get(0).(func(entity.Admin) *entity.Admin); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Admin) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdminService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminService creates a new instance of AdminService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminService(t mockConstructorTestingTNewAdminService) *AdminService {
	mock := &AdminService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
