// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/mashbens/cps/business/superadmin/entity"
	mock "github.com/stretchr/testify/mock"
)

// SuperAdminRepo is an autogenerated mock type for the SuperAdminRepo type
type SuperAdminRepo struct {
	mock.Mock
}

// FindSuperAdminByID provides a mock function with given fields: id
func (_m *SuperAdminRepo) FindSuperAdminByID(id string) (entity.SuperAdmin, error) {
	ret := _m.Called(id)

	var r0 entity.SuperAdmin
	if rf, ok := ret.Get(0).(func(string) entity.SuperAdmin); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.SuperAdmin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSuperAdminByName provides a mock function with given fields: name
func (_m *SuperAdminRepo) FindSuperAdminByName(name string) (entity.SuperAdmin, error) {
	ret := _m.Called(name)

	var r0 entity.SuperAdmin
	if rf, ok := ret.Get(0).(func(string) entity.SuperAdmin); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(entity.SuperAdmin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSuperAdmin provides a mock function with given fields: sAdmin
func (_m *SuperAdminRepo) InsertSuperAdmin(sAdmin entity.SuperAdmin) (entity.SuperAdmin, error) {
	ret := _m.Called(sAdmin)

	var r0 entity.SuperAdmin
	if rf, ok := ret.Get(0).(func(entity.SuperAdmin) entity.SuperAdmin); ok {
		r0 = rf(sAdmin)
	} else {
		r0 = ret.Get(0).(entity.SuperAdmin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.SuperAdmin) error); ok {
		r1 = rf(sAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSuperAdminRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSuperAdminRepo creates a new instance of SuperAdminRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSuperAdminRepo(t mockConstructorTestingTNewSuperAdminRepo) *SuperAdminRepo {
	mock := &SuperAdminRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
