// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/mashbens/cps/business/class/entity"
	mock "github.com/stretchr/testify/mock"
)

// ClassRepo is an autogenerated mock type for the ClassRepo type
type ClassRepo struct {
	mock.Mock
}

// DeleteClass provides a mock function with given fields: classID
func (_m *ClassRepo) DeleteClass(classID string) error {
	ret := _m.Called(classID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(classID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllClass provides a mock function with given fields: search
func (_m *ClassRepo) FindAllClass(search string) []entity.Class {
	ret := _m.Called(search)

	var r0 []entity.Class
	if rf, ok := ret.Get(0).(func(string) []entity.Class); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Class)
		}
	}

	return r0
}

// FindAllClassBySerach provides a mock function with given fields: search
func (_m *ClassRepo) FindAllClassBySerach(search string) []entity.Class {
	ret := _m.Called(search)

	var r0 []entity.Class
	if rf, ok := ret.Get(0).(func(string) []entity.Class); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Class)
		}
	}

	return r0
}

// FindAllClassOff provides a mock function with given fields: search
func (_m *ClassRepo) FindAllClassOff(search string) []entity.Class {
	ret := _m.Called(search)

	var r0 []entity.Class
	if rf, ok := ret.Get(0).(func(string) []entity.Class); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Class)
		}
	}

	return r0
}

// FindAllClassOn provides a mock function with given fields: search
func (_m *ClassRepo) FindAllClassOn(search string) []entity.Class {
	ret := _m.Called(search)

	var r0 []entity.Class
	if rf, ok := ret.Get(0).(func(string) []entity.Class); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Class)
		}
	}

	return r0
}

// FindClassByID provides a mock function with given fields: classID
func (_m *ClassRepo) FindClassByID(classID string) (entity.Class, error) {
	ret := _m.Called(classID)

	var r0 entity.Class
	if rf, ok := ret.Get(0).(func(string) entity.Class); ok {
		r0 = rf(classID)
	} else {
		r0 = ret.Get(0).(entity.Class)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(classID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindClassOffByID provides a mock function with given fields: classID
func (_m *ClassRepo) FindClassOffByID(classID string) (entity.Class, error) {
	ret := _m.Called(classID)

	var r0 entity.Class
	if rf, ok := ret.Get(0).(func(string) entity.Class); ok {
		r0 = rf(classID)
	} else {
		r0 = ret.Get(0).(entity.Class)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(classID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindClassOnByID provides a mock function with given fields: classID
func (_m *ClassRepo) FindClassOnByID(classID string) (entity.Class, error) {
	ret := _m.Called(classID)

	var r0 entity.Class
	if rf, ok := ret.Get(0).(func(string) entity.Class); ok {
		r0 = rf(classID)
	} else {
		r0 = ret.Get(0).(entity.Class)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(classID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertClass provides a mock function with given fields: _a0
func (_m *ClassRepo) InsertClass(_a0 entity.Class) (entity.Class, error) {
	ret := _m.Called(_a0)

	var r0 entity.Class
	if rf, ok := ret.Get(0).(func(entity.Class) entity.Class); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Class)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Class) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClass provides a mock function with given fields: _a0
func (_m *ClassRepo) UpdateClass(_a0 entity.Class) (entity.Class, error) {
	ret := _m.Called(_a0)

	var r0 entity.Class
	if rf, ok := ret.Get(0).(func(entity.Class) entity.Class); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Class)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Class) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClassStatus provides a mock function with given fields: classID, status
func (_m *ClassRepo) UpdateClassStatus(classID string, status string) error {
	ret := _m.Called(classID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(classID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserBooked provides a mock function with given fields: classID, userBooked
func (_m *ClassRepo) UpdateUserBooked(classID string, userBooked int) error {
	ret := _m.Called(classID, userBooked)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(classID, userBooked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClassRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewClassRepo creates a new instance of ClassRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClassRepo(t mockConstructorTestingTNewClassRepo) *ClassRepo {
	mock := &ClassRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
