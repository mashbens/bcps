// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/mashbens/cps/business/payment/entity"
	mock "github.com/stretchr/testify/mock"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

// GetPaymentDetails provides a mock function with given fields: userID
func (_m *PaymentRepository) GetPaymentDetails(userID string) (entity.Payment, error) {
	ret := _m.Called(userID)

	var r0 entity.Payment
	if rf, ok := ret.Get(0).(func(string) entity.Payment); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(entity.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPayment provides a mock function with given fields: _a0
func (_m *PaymentRepository) InsertPayment(_a0 entity.Payment) (entity.Payment, error) {
	ret := _m.Called(_a0)

	var r0 entity.Payment
	if rf, ok := ret.Get(0).(func(entity.Payment) entity.Payment); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Payment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPaymentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentRepository creates a new instance of PaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentRepository(t mockConstructorTestingTNewPaymentRepository) *PaymentRepository {
	mock := &PaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
