// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/mashbens/cps/business/payment/entity"
	mock "github.com/stretchr/testify/mock"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: _a0
func (_m *PaymentService) CreatePayment(_a0 entity.Payment) (*entity.Payment, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Payment
	if rf, ok := ret.Get(0).(func(entity.Payment) *entity.Payment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Payment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaymentDetails provides a mock function with given fields: userID
func (_m *PaymentService) FindPaymentDetails(userID string) (*entity.Payment, error) {
	ret := _m.Called(userID)

	var r0 *entity.Payment
	if rf, ok := ret.Get(0).(func(string) *entity.Payment); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentMidtrans provides a mock function with given fields: paymentID, memberType, amount
func (_m *PaymentService) PaymentMidtrans(paymentID int, memberType string, amount int) string {
	ret := _m.Called(paymentID, memberType, amount)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, string, int) string); ok {
		r0 = rf(paymentID, memberType, amount)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewPaymentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentService(t mockConstructorTestingTNewPaymentService) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
