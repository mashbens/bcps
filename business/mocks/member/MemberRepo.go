// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/mashbens/cps/business/member/entity"

	mock "github.com/stretchr/testify/mock"
)

// MemberRepo is an autogenerated mock type for the MemberRepo type
type MemberRepo struct {
	mock.Mock
}

// DeleteMemberType provides a mock function with given fields: memberID
func (_m *MemberRepo) DeleteMemberType(memberID string) error {
	ret := _m.Called(memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllMemberType provides a mock function with given fields: title
func (_m *MemberRepo) FindAllMemberType(title string) []entity.Membership {
	ret := _m.Called(title)

	var r0 []entity.Membership
	if rf, ok := ret.Get(0).(func(string) []entity.Membership); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Membership)
		}
	}

	return r0
}

// FindMemberByID provides a mock function with given fields: memberID
func (_m *MemberRepo) FindMemberByID(memberID string) (entity.Membership, error) {
	ret := _m.Called(memberID)

	var r0 entity.Membership
	if rf, ok := ret.Get(0).(func(string) entity.Membership); ok {
		r0 = rf(memberID)
	} else {
		r0 = ret.Get(0).(entity.Membership)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InserMemberships provides a mock function with given fields: _a0
func (_m *MemberRepo) InserMemberships(_a0 entity.Membership) (entity.Membership, error) {
	ret := _m.Called(_a0)

	var r0 entity.Membership
	if rf, ok := ret.Get(0).(func(entity.Membership) entity.Membership); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Membership)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Membership) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMemberType provides a mock function with given fields: _a0
func (_m *MemberRepo) UpdateMemberType(_a0 entity.Membership) (entity.Membership, error) {
	ret := _m.Called(_a0)

	var r0 entity.Membership
	if rf, ok := ret.Get(0).(func(entity.Membership) entity.Membership); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Membership)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Membership) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMemberRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMemberRepo creates a new instance of MemberRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMemberRepo(t mockConstructorTestingTNewMemberRepo) *MemberRepo {
	mock := &MemberRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
