// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/mashbens/cps/business/member/entity"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// MemberService is an autogenerated mock type for the MemberService type
type MemberService struct {
	mock.Mock
}

// CreateMemberships provides a mock function with given fields: _a0
func (_m *MemberService) CreateMemberships(_a0 entity.Membership) (*entity.Membership, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Membership
	if rf, ok := ret.Get(0).(func(entity.Membership) *entity.Membership); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Membership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Membership) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMemberType provides a mock function with given fields: adminID, memberID
func (_m *MemberService) DeleteMemberType(adminID string, memberID string) error {
	ret := _m.Called(adminID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(adminID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllMemberType provides a mock function with given fields: search
func (_m *MemberService) FindAllMemberType(search string) []entity.Membership {
	ret := _m.Called(search)

	var r0 []entity.Membership
	if rf, ok := ret.Get(0).(func(string) []entity.Membership); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Membership)
		}
	}

	return r0
}

// FindMemberTypeByID provides a mock function with given fields: memberID
func (_m *MemberService) FindMemberTypeByID(memberID string) (*entity.Membership, error) {
	ret := _m.Called(memberID)

	var r0 *entity.Membership
	if rf, ok := ret.Get(0).(func(string) *entity.Membership); ok {
		r0 = rf(memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Membership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImgUpload provides a mock function with given fields: b
func (_m *MemberService) ImgUpload(b *multipart.FileHeader) string {
	ret := _m.Called(b)

	var r0 string
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) string); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateMemberType provides a mock function with given fields: _a0
func (_m *MemberService) UpdateMemberType(_a0 entity.Membership) (*entity.Membership, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Membership
	if rf, ok := ret.Get(0).(func(entity.Membership) *entity.Membership); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Membership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Membership) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMemberService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMemberService creates a new instance of MemberService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMemberService(t mockConstructorTestingTNewMemberService) *MemberService {
	mock := &MemberService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
